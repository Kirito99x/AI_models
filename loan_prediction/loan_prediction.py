# -*- coding: utf-8 -*-
"""loan prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1udHOSRU2lsHTh1HMWgqUEUwlRQ9lut9a
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import svm

df = pd.read_excel("/content/Copy of loan.xlsx")

df.to_csv('your_csv_file.csv', index=False)

df.head()

df.info()

df.isnull().sum()

df['loanAmount_log']= np.log(df['LoanAmount'])
df['loanAmount_log'].hist(bins=20)

df.isnull().sum()

df['TotalIncome']= df['ApplicantIncome']+df['CoapplicantIncome']
df['TotalIncome_log']= np.log(df['TotalIncome'])
df['TotalIncome_log'].hist(bins=20)

df['Gender'].fillna(df['Gender'].mode()[0],inplace =True)
df['Married'].fillna(df['Married'].mode()[0],inplace =True)
df['Self_Employed'].fillna(df['Self_Employed'].mode()[0],inplace =True)
df['Dependents'].fillna(df['Dependents'].mode()[0],inplace =True)

df.LoanAmount = df.LoanAmount.fillna(df.LoanAmount.mean())
df.loanAmount_log = df.loanAmount_log.fillna(df.loanAmount_log.mean())

df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mode()[0],inplace =True)
df['Credit_History'].fillna(df['Credit_History'].mode()[0],inplace =True)

df.isnull().sum()

df.head(10)

# Select columns from 1 to 5 (excluding 5), 9 to 11 (excluding 11), and 13 to 15 (excluding 15)
x = df.iloc[:,np.r_[1:5,9:11,13:15]].values
# Select column 12
y = df.iloc[:,np.r_[:,12]].values

x

y

print("per of missing gender is %2f%%" %((df['Gender'].isnull().sum()/df.shape[0])*100))

print("number of people who take loan as group by gender:")
print(df['Gender'].value_counts())
sns.countplot(x='Gender',data=df ,palette='Set2')

print("number of people who take loan as group by Martial status:")
print(df['Married'].value_counts())
sns.countplot(x='Married',data=df ,palette='Set1')

print("number of people who take loan as group by Dependents:")
print(df['Dependents'].value_counts())
sns.countplot(x='Dependents',data=df ,palette='Set1')

print("number of people who take loan as group by Self employed:")
print(df['Self_Employed'].value_counts())
sns.countplot(x='Self_Employed',data=df ,palette='Set1')

print("number of people who take loan as group by loanAmount:")
print(df['LoanAmount'].value_counts())
sns.countplot(x='LoanAmount',data=df ,palette='Set1')

print("number of people who take loan as group by credit_history:")
print(df['Credit_History'].value_counts())
sns.countplot(x='Credit_History',data=df ,palette='Set1')

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state= 0)

from sklearn.preprocessing import LabelEncoder

LabelEncoder_x = LabelEncoder()

X_train = X_train.astype(str)
for i in range(0, 5):
  X_train[:, i]= LabelEncoder_x.fit_transform(X_train[:, i])
  X_train[:, 7]= LabelEncoder_x.fit_transform(X_train[:, 7])

X_train

LabelEncoder_y =LabelEncoder()
y_train = LabelEncoder_y.fit_transform(y_train)

y_train

X_test = X_test.astype(str)
for i in range(0, 5):
  X_test[:, i]= LabelEncoder_x.fit_transform(X_test[:, i])
  X_test[:, 7]= LabelEncoder_x.fit_transform(X_test[:, 7])

X_test

LabelEncoder_y =LabelEncoder()
y_test = LabelEncoder_y.fit_transform(y_test)

y_test

from sklearn.preprocessing import StandardScaler

Std= StandardScaler()

X_train= Std.fit_transform(X_train)
X_test= Std.fit_transform(X_test)

from sklearn.ensemble import RandomForestClassifier

rf_c = RandomForestClassifier()
rf_c.fit(X_train, y_train)

from sklearn import metrics

y_pred =rf_c.predict(X_test)

print("acc of random forest clf is", metrics.accuracy_score(y_pred, y_test))

y_pred

from sklearn.naive_bayes import GaussianNB

nb_clf = GaussianNB()

nb_clf.fit(X_train, y_train)

y_pred2 = nb_clf.predict(X_test)
print("acc of naive bayes is:", metrics.accuracy_score(y_pred2, y_test))

y_pred2

from sklearn.linear_model import LogisticRegression

lg_clf = LogisticRegression()

lg_clf.fit(X_train, y_train)

y_pred3 = lg_clf.predict(X_test)
print("acc of lg is:", metrics.accuracy_score(y_pred3, y_test))

y_pred3

from sklearn.svm import SVC
svc_clf = SVC()

svc_clf.fit(X_train, y_train)

y_pred4 = svc_clf.predict(X_test)
print("acc of svc is:", metrics.accuracy_score(y_pred4, y_test))

y_pred4

"""### END"""

